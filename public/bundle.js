(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _taskList = _interopRequireDefault(require("./taskList"));

var _taskDombuilder = _interopRequireDefault(require("./taskDombuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_taskDombuilder.default.taskBuilding();

_taskList.default.taskify();

},{"./taskDombuilder":4,"./taskList":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const tasks = {
  taskBuilder(taskObject) {
    let formTasks = document.createElement("article");
    let taskHeader = document.createElement("p");
    taskHeader.textContent = taskObject.task;
    let taskInput = document.createElement("h5");
    taskInput.textContent = taskObject.date;
    let taskComplete = document.createElement("h5");
    taskComplete.textContent = taskObject.completionDate;
    formTasks.appendChild(taskHeader);
    formTasks.appendChild(taskInput);
    formTasks.appendChild(taskComplete);
    return formTasks;
  }

};
var _default = tasks;
exports.default = _default;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const taskCollection = {
  getAllTasks() {
    return fetch("http://localhost:8088/Tasks").then(response => response.json());
  },

  postNewTask(newTaskToSave) {
    return fetch("http://localhost:8088/Tasks", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newTaskToSave)
    });
  }

};
var _default = taskCollection;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _taskCollection = _interopRequireDefault(require("./taskCollection"));

var _taskList = _interopRequireDefault(require("./taskList"));

var _task = _interopRequireDefault(require("./task"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const taskBuilder = {
  taskBuilding() {
    let taskNameField = document.createElement("fieldset");
    let taskNameLabel = document.createElement("label");
    let taskName = document.createElement("input");
    taskName.setAttribute("id", "taskName");
    taskName.placeholder = "Input New Task";
    taskName.setAttribute("name", "task-name");
    taskNameField.appendChild(taskNameLabel);
    taskNameField.appendChild(taskName);
    let taskDateField = document.createElement("fieldset");
    let taskDateLabel = document.createElement("label");
    let taskDate = document.createElement("input");
    taskDate.setAttribute("id", "taskDate");
    taskDate.placeholder = "Date of Task";
    taskDate.setAttribute("name", "task-date");
    taskDateField.appendChild(taskDateLabel);
    taskDateField.appendChild(taskDate);
    let taskCompleteField = document.createElement("fieldset");
    let taskCompleteLabel = document.createElement("label");
    let taskCompletionDate = document.createElement("input");
    taskCompletionDate.setAttribute("id", "taskCompletionDate");
    taskCompletionDate.placeholder = "Completion date of Task";
    taskCompletionDate.setAttribute("id", "task-Completion");
    taskCompleteField.appendChild(taskCompleteLabel);
    taskCompleteField.appendChild(taskCompletionDate);
    let submitButton = document.createElement("button");
    submitButton.textContent = "Add Task";
    submitButton.setAttribute("class", "task-save");
    submitButton.addEventListener("click", this.handleNewTask);
    let taskFormFragment = document.createDocumentFragment();
    taskFormFragment.appendChild(taskNameField);
    taskFormFragment.appendChild(taskDateField);
    taskFormFragment.appendChild(taskCompleteField);
    taskFormFragment.appendChild(submitButton);
    let formArticle = document.querySelector(".formTasks");
    formArticle.appendChild(taskFormFragment);
    return taskBuilder;
  },

  handleNewTask() {
    let inputTaskName = document.querySelector("#taskName").value;
    let taskDate = document.querySelector("#taskDate").value;
    let inputCompletionDate = document.querySelector("#task-Completion").value;
    let newTask = {
      task: inputTaskName,
      date: taskDate,
      completionDate: inputCompletionDate
    };

    _taskCollection.default.postNewTask(newTask).then(response => {
      _taskList.default.taskify();
    });
  }

};
var _default = taskBuilder; // taskCreationDate for created date
// taskDueDate for date task is due

exports.default = _default;

},{"./task":2,"./taskCollection":3,"./taskList":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _task = _interopRequireDefault(require("./task"));

var _taskCollection = _interopRequireDefault(require("./taskCollection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const taskList = {
  taskify() {
    _taskCollection.default.getAllTasks().then(allTasks => {
      let taskDocFragment = document.createDocumentFragment();
      allTasks.forEach(taskItem => {
        let taskHtml = _task.default.taskBuilder(taskItem);

        taskDocFragment.appendChild(taskHtml);
      });
      let outputArticle = document.querySelector(".displayTasks");

      while (outputArticle.firstChild) {
        outputArticle.removeChild(outputArticle.firstChild);
      }

      outputArticle.appendChild(taskDocFragment);
    });
  }

};
var _default = taskList;
exports.default = _default;

},{"./task":2,"./taskCollection":3}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
