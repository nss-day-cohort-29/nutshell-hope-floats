(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _messageList = _interopRequireDefault(require("./messageList"));

var _messageForm = _interopRequireDefault(require("./messageForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_messageList.default.chatify();

_messageForm.default.createAndAppendForm();

},{"./messageForm":5,"./messageList":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _messageCollection = _interopRequireDefault(require("./messageCollection"));

var _messageList = _interopRequireDefault(require("./messageList"));

var _messageEditForm = _interopRequireDefault(require("./messageEditForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const message = {
  messageBuilder(messageObject) {
    let messageArticle = document.createElement("article");
    messageArticle.setAttribute("id", `message--${messageObject.id}`);
    messageArticle.setAttribute("class", "messageArticle");
    let messageName = document.createElement("h3");
    messageName.textContent = messageObject.SenderName;
    let messageContent = document.createElement("p");
    messageContent.textContent = messageObject.Message;
    let date = document.createElement("p");
    date.textContent = messageObject.Date;
    let editMessageButton = document.createElement("button");
    editMessageButton.textContent = "Edit";
    editMessageButton.addEventListener("click", () => {
      let articleId = event.target.parentNode.id;
      let messageId = articleId.split("--")[1];

      _messageCollection.default.getMessage(messageId).then(response => {
        _messageEditForm.default.createAndAppendForm(articleId, response);
      });
    });
    let deleteMessageButton = document.createElement("button");
    deleteMessageButton.textContent = "Delete";
    deleteMessageButton.addEventListener("click", () => {
      let messageId = event.target.parentNode.id.split("--")[1];

      _messageCollection.default.deleteMessage(messageId).then(response => {
        _messageList.default.chatify();
      });
    });
    let horizontalRule = document.createElement("hr");
    messageArticle.appendChild(messageName);
    messageArticle.appendChild(messageContent);
    messageArticle.appendChild(date);
    messageArticle.appendChild(editMessageButton);
    messageArticle.appendChild(deleteMessageButton);
    messageArticle.appendChild(horizontalRule);
    return messageArticle;
  }

};
var _default = message;
exports.default = _default;

},{"./messageCollection":3,"./messageEditForm":4,"./messageList":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const messageCollection = {
  getAllmessages() {
    return fetch("http://localhost:8088/Messages").then(response => response.json());
  },

  postNewMessage(newMessageToSave) {
    return fetch("http://localhost:8088/Messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newMessageToSave)
    });
  },

  deleteMessage(messageId) {
    return fetch(`http://localhost:8088/Messages/${messageId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  getMessage(messageId) {
    return fetch(`http://localhost:8088/Messages/${messageId}`).then(response => response.json());
  },

  putExistingMessage(messageId, messageToEdit) {
    return fetch(`http://localhost:8088/Messages/${messageId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(messageToEdit)
    });
  }

};
var _default = messageCollection;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _messageCollection = _interopRequireDefault(require("./messageCollection"));

var _messageList = _interopRequireDefault(require("./messageList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const messageEditForm = {
  createAndAppendForm(articleId, messageObjToEdit) {
    let messageNameField = document.createElement("p");
    let messageNameLabel = document.createElement("label");
    messageNameLabel.textContent = "Sender  ";
    let messageNameInput = document.createElement("input");
    messageNameInput.value = messageObjToEdit.SenderName;
    messageNameField.appendChild(messageNameLabel);
    messageNameField.appendChild(messageNameInput);
    let messageInputField = document.createElement("p");
    let messageInputLabel = document.createElement("label");
    messageInputLabel.textContent = "Edit Message  ";
    let messageContentInput = document.createElement("textarea");
    messageContentInput.value = messageObjToEdit.Message;
    messageInputField.appendChild(messageInputLabel);
    messageInputField.appendChild(messageContentInput);
    let dateField = document.createElement("p");
    let dateLabel = document.createElement("label");
    dateLabel.textContent = "Date  ";
    let dateInput = document.createElement("input");
    dateInput.value = messageObjToEdit.Date;
    dateField.appendChild(dateLabel);
    dateField.appendChild(dateInput);
    let updateButton = document.createElement("button");
    updateButton.textContent = "Update";
    updateButton.addEventListener("click", () => {
      let editedMessage = {
        SenderName: messageNameInput.value,
        Message: messageContentInput.value,
        Date: dateInput.value
      };

      _messageCollection.default.putExistingMessage(messageObjToEdit.id, editedMessage).then(response => {
        _messageList.default.chatify();
      });
    });
    let messageItemArticle = document.querySelector(`#${articleId}`);

    while (messageItemArticle.firstChild) {
      messageItemArticle.removeChild(messageItemArticle.firstChild);
    }

    messageItemArticle.appendChild(messageNameField);
    messageItemArticle.appendChild(messageInputField);
    messageItemArticle.appendChild(dateField);
    messageItemArticle.appendChild(updateButton);
  }

};
var _default = messageEditForm;
exports.default = _default;

},{"./messageCollection":3,"./messageList":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _messageCollection = _interopRequireDefault(require("./messageCollection"));

var _messageList = _interopRequireDefault(require("./messageList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const messageForm = {
  createAndAppendForm() {
    function getTimeStamp() {
      var now = new Date();
      return now.getMonth() + 1 + '/' + now.getDate() + '/' + now.getFullYear() + " " + now.getHours() + ':' + (now.getMinutes() < 10 ? "0" + now.getMinutes() : now.getMinutes()) + ':' + (now.getSeconds() < 10 ? "0" + now.getSeconds() : now.getSeconds());
    }

    let formHeader = document.createElement("h2");
    formHeader.textContent = "   Welcome To Chat Box";
    let messageNameField = document.createElement("fieldset");
    let messageNameLabel = document.createElement("label");
    messageNameLabel.textContent = "Sender's Name ";
    messageNameLabel.setAttribute("for", "message__name");
    let messageNameInput = document.createElement("input");
    messageNameInput.setAttribute("id", "message__name");
    messageNameInput.setAttribute("name", "message__name");
    messageNameField.appendChild(messageNameLabel);
    messageNameField.appendChild(messageNameInput);
    let messageInputField = document.createElement("fieldset");
    let messageInputLabel = document.createElement("label");
    messageInputLabel.textContent = "Your Message ";
    messageInputLabel.setAttribute("for", "message__content");
    let messageInputBox = document.createElement("textarea");
    messageInputBox.setAttribute("id", "message__content");
    messageInputBox.setAttribute("name", "message__content");
    messageInputField.appendChild(messageInputLabel);
    messageInputField.appendChild(messageInputBox);
    let messageDateField = document.createElement("fieldset");
    let messageDateLabel = document.createElement("label");
    messageDateLabel.textContent = "Date ";
    messageDateLabel.setAttribute("for", "message__date");
    let messageDateInput = document.createElement("input");
    messageDateInput.setAttribute("id", "date__input");
    messageDateInput.setAttribute("name", "date__input");
    messageDateField.appendChild(messageDateLabel);
    messageDateField.appendChild(messageDateInput);
    let submitButton = document.createElement("button");
    submitButton.textContent = "Send";
    submitButton.setAttribute("class", "message__send");
    submitButton.addEventListener("click", this.handleAddNewMessage);
    let messageFormFragment = document.createDocumentFragment();
    messageFormFragment.appendChild(formHeader);
    messageFormFragment.appendChild(messageNameField);
    messageFormFragment.appendChild(messageInputField);
    messageFormFragment.appendChild(messageDateField);
    messageFormFragment.appendChild(submitButton);
    let formArticle = document.querySelector(".formMessages");
    formArticle.appendChild(messageFormFragment);
  },

  handleAddNewMessage(event) {
    let inputMessageName = document.querySelector("#message__name").value;
    let inputMessageContent = document.querySelector("#message__content").value;
    let inputMessageDate = document.querySelector("#date__input").value;
    let newMessage = {
      SenderName: inputMessageName,
      Message: inputMessageContent,
      Date: inputMessageDate
    };

    _messageCollection.default.postNewMessage(newMessage); // .then(reponse => {


    _messageList.default.chatify(); // })

  }

};
var _default = messageForm;
exports.default = _default;

},{"./messageCollection":3,"./messageList":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _messageCollection = _interopRequireDefault(require("./messageCollection"));

var _message = _interopRequireDefault(require("./message"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const messageList = {
  chatify() {
    _messageCollection.default.getAllmessages().then(allMessages => {
      let messageDocFragment = document.createDocumentFragment();
      allMessages.forEach(chat => {
        let messageHtml = _message.default.messageBuilder(chat);

        messageDocFragment.appendChild(messageHtml);
      });
      let displayArticle = document.querySelector(".displayMessages");

      while (displayArticle.firstChild) {
        displayArticle.removeChild(displayArticle.firstChild);
      }

      displayArticle.appendChild(messageDocFragment);
    });
  }

};
var _default = messageList;
exports.default = _default;

},{"./message":2,"./messageCollection":3}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
